<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The DaoDeJing Blog</title>
    <link>https://daodejing.github.io/</link>
    <description>Recent content on The DaoDeJing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 23 Mar 2024 15:17:57 +0900</lastBuildDate><atom:link href="https://daodejing.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Toy K8s</title>
      <link>https://daodejing.github.io/posts/toy-k8s/</link>
      <pubDate>Sat, 23 Mar 2024 15:17:57 +0900</pubDate>
      
      <guid>https://daodejing.github.io/posts/toy-k8s/</guid>
      <description>This works on my M2 Mac.
You can get lima sample configurations here.
Spin up Lima k3d:
# When running for the first time ➜ limactl start ./examples/k3s.yaml # or If you have already created the VM image ➜ limactl start k3s Configure your host kubectl to connect to the lima k3s:
➜ export KUBECONFIG=&amp;#34;$HOME/.lima/k3s/copied-from-guest/kubeconfig.yaml&amp;#34; (The below was copied from: https://docs.k3s.io/storage)
Create Longhorn Storage: Longhorn Storage allows for ReadWriteMany from Pods kubectl apply -f https://raw.</description>
    </item>
    
    <item>
      <title>Create a Hugo Blog Post</title>
      <link>https://daodejing.github.io/posts/hugo-posts/</link>
      <pubDate>Wed, 20 Mar 2024 17:42:24 +0900</pubDate>
      
      <guid>https://daodejing.github.io/posts/hugo-posts/</guid>
      <description>If you haven&amp;rsquo;t done so already, setup Hugo with github pages Create a new post markdown file: ➜ hugo new content posts/hugo-posts.md In order for the new post to be displayed in blog site, delete the draft: true line from the frontmatter yaml at the top of the markdown file: --- title: &amp;#34;Create a Hugo Blog Post&amp;#34; date: 2024-03-20T17:42:24+09:00 draft: true --- Write your blog You&amp;rsquo;re on your own here, but you can run a local hugo server from your hugo root directory to preview your changes: you can know which is the hugo root directory, because it contains the hugo configuration file: hugo.</description>
    </item>
    
    <item>
      <title>Smoother Linking in Neovim</title>
      <link>https://daodejing.github.io/posts/fine-tuning-links-in-neovim/</link>
      <pubDate>Sat, 15 Jul 2023 22:08:25 +0900</pubDate>
      
      <guid>https://daodejing.github.io/posts/fine-tuning-links-in-neovim/</guid>
      <description>Motivated by the desire for a smooth-as-coconut-oil Neovim experience, I learnt how to eliminate some friction when navigating links.
gx The Default Behavior Typing gx with the cursor above an http link, uses Netrw to open the link in your browser, so far so good.
Typing gx with the cursor above a plugin ID such as chrishrb/gx.nvim, gives you an error:
**warning** (netrw) shell signalled an error Using the plugin chrishrb/gx.</description>
    </item>
    
  </channel>
</rss>
